// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Cars.Models;

public partial class CarsContext : DbContext
{
    public CarsContext()
    {
    }

    public CarsContext(DbContextOptions<CarsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<Client> Clients { get; set; }

    public virtual DbSet<ClientCar> ClientCars { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<ContractCar> ContractCars { get; set; }

    public virtual DbSet<ContractService> ContractServices { get; set; }

    public virtual DbSet<Craftsman> Craftsmen { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<ServiceCenter> ServiceCenters { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=JEZS-LAPTOP\\SQLEXPRESS;Initial Catalog=Cars;Integrated Security=True;Encrypt=True;Trust Server Certificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Car>(entity =>
        {
            entity.ToTable("Car", tb => tb.HasTrigger("CarDelete"));

            entity.HasIndex(e => e.CarNum, "CarNum").IsUnique();

            entity.Property(e => e.CarId).HasColumnName("Car_ID");
            entity.Property(e => e.BodyType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Body_Type");
            entity.Property(e => e.CarNum)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("Car_Num");
            entity.Property(e => e.Color)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EnginePower).HasColumnName("Engine_Power");
            entity.Property(e => e.Manufacturer)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PassengersAmount).HasColumnName("Passengers_Amount");
            entity.Property(e => e.Serial)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Client>(entity =>
        {
            entity.ToTable("Client");

            entity.Property(e => e.ClientId).HasColumnName("Client_ID");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("First_Name");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .HasColumnName("Middle_Name");
            entity.Property(e => e.SecondName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Second_Name");
            entity.Property(e => e.TelNumber)
                .IsRequired()
                .HasMaxLength(16)
                .HasColumnName("Tel_Number");
        });

        modelBuilder.Entity<ClientCar>(entity =>
        {
            entity.ToTable("Client_Car");

            entity.Property(e => e.ClientCarId).HasColumnName("Client_Car_ID");
            entity.Property(e => e.CarId).HasColumnName("Car_ID");
            entity.Property(e => e.ClientId).HasColumnName("Client_ID");

            entity.HasOne(d => d.Car).WithMany(p => p.ClientCars)
                .HasForeignKey(d => d.CarId)
                .HasConstraintName("FK_Client_Car_Car");

            entity.HasOne(d => d.Client).WithMany(p => p.ClientCars)
                .HasForeignKey(d => d.ClientId)
                .HasConstraintName("FK_Client_Car_Client");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.ToTable("Contract");

            entity.Property(e => e.ContractId).HasColumnName("Contract_ID");
            entity.Property(e => e.ClientId).HasColumnName("Client_ID");
            entity.Property(e => e.ConclusionDate).HasColumnName("Conclusion_Date");

            entity.HasOne(d => d.Client).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.ClientId)
                .HasConstraintName("FK_Contract_Client");
        });

        modelBuilder.Entity<ContractCar>(entity =>
        {
            entity.ToTable("Contract_Car");

            entity.Property(e => e.ContractCarId).HasColumnName("Contract_Car_ID");
            entity.Property(e => e.CarId).HasColumnName("Car_ID");
            entity.Property(e => e.ContractId).HasColumnName("Contract_ID");

            entity.HasOne(d => d.Car).WithMany(p => p.ContractCars)
                .HasForeignKey(d => d.CarId)
                .HasConstraintName("FK_Contract_Car_Car");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractCars)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_Contract_Car_Contract");
        });

        modelBuilder.Entity<ContractService>(entity =>
        {
            entity.ToTable("Contract_Service");

            entity.Property(e => e.ContractServiceId).HasColumnName("Contract_Service_ID");
            entity.Property(e => e.ContractId).HasColumnName("Contract_ID");
            entity.Property(e => e.ServiceId).HasColumnName("Service_ID");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractServices)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_Contract_Service_Contract");

            entity.HasOne(d => d.Service).WithMany(p => p.ContractServices)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK_Contract_Service_Service");
        });

        modelBuilder.Entity<Craftsman>(entity =>
        {
            entity.ToTable("Craftsman");

            entity.Property(e => e.CraftsmanId).HasColumnName("Craftsman_ID");
            entity.Property(e => e.CenterId).HasColumnName("Center_ID");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("First_Name");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .HasColumnName("Middle_Name");
            entity.Property(e => e.SecondName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Second_Name");

            entity.HasOne(d => d.Center).WithMany(p => p.Craftsmen)
                .HasForeignKey(d => d.CenterId)
                .HasConstraintName("FK_Craftsman_Service_Center");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.ToTable("Service");

            entity.Property(e => e.ServiceId).HasColumnName("Service_ID");
            entity.Property(e => e.CenterId).HasColumnName("Center_ID");
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.ServiceType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Service_Type");

            entity.HasOne(d => d.Center).WithMany(p => p.Services)
                .HasForeignKey(d => d.CenterId)
                .HasConstraintName("FK_Service_Service_Center");
        });

        modelBuilder.Entity<ServiceCenter>(entity =>
        {
            entity.HasKey(e => e.CenterId);

            entity.ToTable("Service_Center");

            entity.Property(e => e.CenterId).HasColumnName("Center_ID");
            entity.Property(e => e.Building)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.CarsAmount).HasColumnName("Cars_Amount");
            entity.Property(e => e.CenterName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Center_Name");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FirmName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Firm_Name");
            entity.Property(e => e.Street)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.UserId).HasColumnName("User_ID");
            entity.Property(e => e.ClientId).HasColumnName("Client_ID");
            entity.Property(e => e.CraftsmanId).HasColumnName("Craftsman_ID");
            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Client).WithMany(p => p.Users)
                .HasForeignKey(d => d.ClientId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_User_Client");

            entity.HasOne(d => d.Craftsman).WithMany(p => p.Users)
                .HasForeignKey(d => d.CraftsmanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_User_Craftsman");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}